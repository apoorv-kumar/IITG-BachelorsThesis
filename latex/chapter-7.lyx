#LyX 2.0 created this file. For more info see http://www.lyx.org/
\lyxformat 413
\begin_document
\begin_header
\textclass scrbook
\begin_preamble
% increase link area for cross-references and autoname them
\AtBeginDocument{\renewcommand{\ref}[1]{\mbox{\autoref{#1}}}}
\newlength{\abc}
\settowidth{\abc}{\space}
\AtBeginDocument{%
\addto\extrasenglish{
 \renewcommand{\equationautorefname}{\hspace{-\abc}}
 \renewcommand{\sectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsectionautorefname}{sec.\negthinspace}
 \renewcommand{\subsubsectionautorefname}{sec.\negthinspace}
 \renewcommand{\figureautorefname}{Fig.\negthinspace}
 \renewcommand{\tableautorefname}{Tab.\negthinspace}
}
}

% in case somebody want to have the label "Gleichung"
%\renewcommand{\eqref}[1]{Gleichung~(\negthinspace\autoref{#1})}

% put the link to figure floats to the beginning
% of the figure and not to its end
\usepackage[figure]{hypcap}



% the pages of the TOC is numbered roman
% and a pdf-bookmark for the TOC is added
\let\myTOC\tableofcontents
\renewcommand\tableofcontents{%
  \frontmatter
  \pdfbookmark[1]{\contentsname}{}
  \myTOC
  \mainmatter }

% make caption labels bold
\setkomafont{captionlabel}{\bfseries}
\setcapindent{1em}

% enable calculations
\usepackage{calc}

% fancy page header/footer settings
\renewcommand{\chaptermark}[1]{\markboth{#1}{#1}}
\renewcommand{\sectionmark}[1]{\markright{\thesection\ #1}}

% increase the bottom float placement fraction
\renewcommand{\bottomfraction}{0.5}

% avoid that floats are placed above its sections
\let\mySection\section\renewcommand{\section}{\suppressfloats[t]\mySection}
\end_preamble
\options intoc,bibliography=totoc,index=totoc,BCOR10mm,captions=tableheading,titlepage,fleqn
\use_default_options true
\master thesis.lyx
\begin_modules
customHeadersFooters
\end_modules
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding auto
\fontencoding global
\font_roman lmodern
\font_sans lmss
\font_typewriter lmtt
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\float_placement h
\paperfontsize 10
\spacing single
\use_hyperref true
\pdf_title "Your title"
\pdf_author "Your name"
\pdf_bookmarks true
\pdf_bookmarksnumbered true
\pdf_bookmarksopen true
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle false
\pdf_quoted_options "pdfpagelayout=OneColumn, pdfnewwindow=true, pdfstartview=XYZ, plainpages=false"
\papersize a4paper
\use_geometry false
\use_amsmath 2
\use_esint 1
\use_mhchem 1
\use_mathdots 1
\cite_engine basic
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\use_refstyle 0
\branch NoChildDocument
\selected 0
\filename_suffix 0
\color #ff0000
\end_branch
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation skip
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Left Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
chaptername
\end_layout

\end_inset


\begin_inset space ~
\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thechapter
\end_layout

\end_inset


\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
rightmark
\end_layout

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
Enable page headers and add the chapter to the header line.
\end_layout

\end_inset


\end_layout

\begin_layout Right Header
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
leftmark
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Left Footer
\begin_inset Argument
status open

\begin_layout Plain Layout
\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Center Footer

\end_layout

\begin_layout Right Footer
\begin_inset Argument
status open

\begin_layout Plain Layout

\end_layout

\end_inset


\begin_inset ERT
status collapsed

\begin_layout Plain Layout


\backslash
thepage
\end_layout

\end_inset


\end_layout

\begin_layout Chapter
A wireless simulator built upon wired NoC simulator.
\end_layout

\begin_layout Section
Current Noxim Structure
\end_layout

\begin_layout Standard
Noxim is a Network-on-Chip (NoC) simulator developed by the engineers Maurizio
 Palesi, Davide Patti and Fabrizio Fazzino at the Università degli Studi
 di Catania (Italy).
\end_layout

\begin_layout Standard
The simulator is developed in SystemC: a system description language based
 on C++.
 User provides the following input configuration parameters:
\end_layout

\begin_layout Itemize
network size
\end_layout

\begin_layout Itemize
buffer size
\end_layout

\begin_layout Itemize
packet size distribution
\end_layout

\begin_layout Itemize
routing algorithm
\end_layout

\begin_layout Itemize
selection strategy
\end_layout

\begin_layout Itemize
packet injection rate
\end_layout

\begin_layout Itemize
trafﬁc time distribution
\end_layout

\begin_layout Itemize
trafﬁc pattern
\end_layout

\begin_layout Itemize
hot-spot trafﬁc distribution.
\end_layout

\begin_layout Standard
Using the given parameters, the simulator then evaluates and outputs the
 following metrics: 
\end_layout

\begin_layout Itemize
throughput 
\end_layout

\begin_layout Itemize
delay
\end_layout

\begin_layout Itemize
power consumption
\end_layout

\begin_layout Standard
These metrics are available both at node and global level.
\end_layout

\begin_layout Subsection
Units
\end_layout

\begin_layout Subsubsection
Processor
\end_layout

\begin_layout Standard
The processor is the unit responsible for creating traffic.
 It takes in the parameters of PIR and traffic pattern and accordingly generates
 the packets.
 In systemC this is implemented as a module 
\series bold
NoximProcessingElement
\series default
.
 It is directly connected with the router.
 The packets that reach the destination router are finally drained into
 the processor.
\end_layout

\begin_layout Subsubsection
Router
\end_layout

\begin_layout Standard
The router is responsible for routing packets through the network following
 the parameters provided by the user.
 Particularly, the routing algorithm and buffer size are potent factors
 in deciding the network performance.
 'Selection strategy' is used for fine-tuning the decisions when multiple
 options are available for routing the packet.
 It has been implemented as the module 
\series bold
NoximRouter
\series default
.
\end_layout

\begin_layout Subsubsection
Tile
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/NoximTile.png
	width 9cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
A tile consists of the processor and router.
 The entire network is essentially tiles connected by links.
\end_layout

\begin_layout Subsubsection
Links
\end_layout

\begin_layout Standard
Links are provided within the SystemC framework.
\end_layout

\begin_layout Standard
In Noxim, each of the interfaces has the following links going out/in.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/networkIFace.png
	width 9cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Enumerate
Data I/O -
\end_layout

\begin_deeper
\begin_layout Enumerate
the actual transfer to flits takes place through this line.
 
\end_layout

\begin_layout Enumerate
Width = 1 flit size.
\end_layout

\end_deeper
\begin_layout Enumerate
Free buffer slots status - t
\end_layout

\begin_deeper
\begin_layout Enumerate
his information is used to optimize and choose between multiple routing
 options.
\end_layout

\begin_layout Enumerate
Width = 
\begin_inset Formula $\log_{2}(maxBufferSize)$
\end_inset


\end_layout

\end_deeper
\begin_layout Enumerate
Neighbors on path - 
\end_layout

\begin_deeper
\begin_layout Enumerate
again used to choose between two routing path candidates
\end_layout

\end_deeper
\begin_layout Enumerate
OUT-REQ
\end_layout

\begin_deeper
\begin_layout Enumerate
used by the node to request a buffer slot in an adjacent node in order to
 begin transmission/forwarding.
\end_layout

\begin_layout Enumerate
Width = 1
\end_layout

\end_deeper
\begin_layout Enumerate
OUT-ACK
\end_layout

\begin_deeper
\begin_layout Enumerate
used to notify the availability of free buffer an adjacent node soliciting
 a buffer slot.
\end_layout

\begin_layout Enumerate
Width = 1
\end_layout

\end_deeper
\begin_layout Enumerate
IN-REQ
\end_layout

\begin_deeper
\begin_layout Enumerate
used by the node to receive a request of an adjacent node for a buffer slot
 in order to begin transmission/forwarding.
\end_layout

\begin_layout Enumerate
Width = 1
\end_layout

\end_deeper
\begin_layout Enumerate
IN-ACK
\end_layout

\begin_deeper
\begin_layout Enumerate
used by node to receive the notification issued by the adjacent node regarding
 the availability of free buffer slot in it.
\end_layout

\begin_layout Enumerate
Width = 1
\end_layout

\end_deeper
\begin_layout Subsubsection
NoC
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/NoximNoc.png
	width 9cm

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:NoximNoC"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Combining the links and the tiles, Noxim creates a mesh NoC as depicted
 in 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:NoximNoC"

\end_inset

 - a 2x3 NoC.
 
\end_layout

\begin_layout Subsection
Topology
\end_layout

\begin_layout Standard
Noxim, as it is, supports only a mesh topology.
\end_layout

\begin_layout Subsection
Traffic scenarios
\end_layout

\begin_layout Standard
Noxim provides a wide range of traffic scenarios - 
\end_layout

\begin_layout Itemize
Random
\end_layout

\begin_layout Itemize
Transpose
\end_layout

\begin_layout Itemize
Bit reversal
\end_layout

\begin_layout Itemize
Butterfly
\end_layout

\begin_layout Itemize
Shuffle
\end_layout

\begin_layout Section
Adding a wireless layer
\end_layout

\begin_layout Standard
We currently lack a decent open source simulator to simulate wireless NoCs.
 There are a bunch of simulators that can take in the parameters characteristic
 of wireless links and apply it to wired networks but the results are not
 likely to be satisfactory if one wants to get a deeper picture, and not
 just a high level result (which again might not be good enough).
\end_layout

\begin_layout Standard
In order to add a wireless layer to the Noxim simulator, we need to make
 some sweeping changes in the architecture.
 More so because the wireless model needs to take the fine grained asynchronous
 and analog nature of wireless communication.
 Right now I am developing a hard-wired 4x4 mesh simulator employing 4 cluster
 based wireless links as a proof of concept.
 Once the results are proven to be satisfactory, the idea can be generalized
 to get a NxN mesh simulator with arbitrary number of wireless nodes.
\end_layout

\begin_layout Standard
To start modelling the wireless layer the first entity we need to model
 is the channel in which the wireless nodes will operate.
\end_layout

\begin_layout Subsection
Wireless channel design
\end_layout

\begin_layout Standard
Following is a SystemC model of the wireless router
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size small
\lang czech
SC_MODULE(NoximWirelessChannel) {
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in<bool> reset; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// Constructor
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

SC_CTOR(NoximWirelessChannel) { channel_data = NULL; }
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
public:
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_mutex channelAccess; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

NoximFlit* channel_data; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_event pushIntoChannel;
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
};
\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
channelAccess 
\series default
is a mutex ( model provided by the SystemC library ) that any node needs
 to lock before accessing the channel.
 This is an idealistic model where we assume that all the nodes are somehow
 synchronized and getting a lock is possbile in the distributed environment.
\end_layout

\begin_layout Standard
Once the channel is locked by a wireless node for access, the node proceeds
 to write the data (flit) it needs to send on the media by making 
\series bold
channel_data 
\series default
point to the data.
\end_layout

\begin_layout Standard
Finally, following the asynchronous model, when data is written onto the
 media, all other nodes should become aware of it.
 This is achieved by notifying the event 
\series bold
pushIntoChannel
\series default
\SpecialChar \@.
 In the model, all the wireless nodes are asynchronously sensitive to this
 event.
 Upon being notified that some data has been written onto the channel, the
 nodes read the data, and accept or reject it depending upon who the intended
 recipient is (this is done using the destination address on the flit).
\end_layout

\begin_layout Subsection
Wireless node design
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/wireless_router.png
	width 5cm

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Enunciating the structure (see the SystemC code that follows):
\end_layout

\begin_layout Standard
The buffer array 
\series bold
channel_buffer 
\series default
stores the data coming in from the IPs.
 This is necessary because we are trying to interface a module that is being
 contended for with a traffic generator.
 On the other hand, we don't need buffers on the reverse link because the
 IPs are not being contended for.
 The wireless router can try to reach the IPs and will always find them
 free.
 In addition to these, the 
\series bold
wireless_buffer
\series default
 holds the packets received through wireless network.
 The packets are then delivered to the intended IPs.
 Again the buffer is necessary as the nodes using wired links might not
 be able to keep up with the wireless link.
 
\end_layout

\begin_layout Standard
The I/O ports in this module are very similar to that of a wired router
 using the same set of clock,reset and REQ-ACK ports.
 
\end_layout

\begin_layout Standard
The constructor sets the sensitivity of router.
 The wired processes are sensitive to clock (clock triggered) while the
 wireless reception is triggered by someone writing a piece of data on the
 channel.
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\size small
\lang czech
SC_MODULE(NoximWirelessRouter) {
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
/*internal functions have been removed to maintain clarity*/
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// I/O Ports 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// =================================== 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The input clock for the router 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in_clk clock; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The reset signal for the router
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in<bool> reset; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The input channels 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in<NoximFlit> flit_rx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The requests associated with the input channels 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in<bool> req_rx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The outgoing ack signals associated with the input channels
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_out<bool> ack_rx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The output channels 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_out<NoximFlit> flit_tx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The requests associated with the output channels 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_out<bool> req_tx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// The outgoing ack signals associated with the output channels
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_in<bool> ack_tx[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// ===================================
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// ===================================
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// Registers
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// buffer for wireless reception 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

NoximBuffer wireless_buffer; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

// Buffer for each input channel 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

NoximBuffer channel_buffer[WDIRS_Y][WDIRS_X]; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// ===================================
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

sc_event signalInChannel;
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

NoximWirelessChannel * channel;
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// Constructor
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// ===================================
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

SC_CTOR(NoximWirelessRouter) { 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// -------- Wired reception process
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

SC_METHOD(rxWiredProcess); 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

sensitive << reset; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

sensitive << clock.pos();
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// -------- Wired transmission process
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

SC_METHOD(txWiredProcess); 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

sensitive << reset; 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

sensitive << clock.pos();
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
// -------- Wireless reception process
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

SC_METHOD(rxWirelessProcess); 
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset


\begin_inset space \qquad{}
\end_inset

sensitive << channel->pushIntoChannel;
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
\begin_inset space \qquad{}
\end_inset

}
\end_layout

\begin_layout Plain Layout

\size small
\lang czech
};
\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Subsection
Final view of the merged wired and wireless layer
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset Graphics
	filename images/wirelessNoC.png
	width 12cm
	rotateAngle 90
	rotateOrigin rightBottom

\end_inset


\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Results
\end_layout

\begin_layout Standard
For wired communications using the Noxim simulator - 
\end_layout

\begin_layout Standard
with the following parameters:
\end_layout

\begin_layout Standard
Mesh Dimensions : 4x4
\end_layout

\begin_layout Standard
Buffer Depth : 4
\end_layout

\begin_layout Standard
Packet size range (in flits) : 2-10
\end_layout

\begin_layout Standard
Routing Algorithm : XY
\end_layout

\begin_layout Standard
Selection Strategy : Random
\end_layout

\begin_layout Standard
PIR : 0.01
\end_layout

\begin_layout Standard
Probability of retransmission : 0.01 (same as PIR) - Poisson distribution
\end_layout

\begin_layout Standard
Traffic : Random
\end_layout

\begin_layout Standard
We get the following statistics 
\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
(averaged over 20 simulations)
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
MaxDelay = 
\begin_inset Formula $\begin{pmatrix}42 & 39 & 38 & 41\\
41 & 35 & 33 & 47\\
36 & 38 & 39 & 44\\
38 & 39 & 37 & 42
\end{pmatrix}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Formula $(i,j)^{th}$
\end_inset

 element in the MaxDelay matrix represents the maximum delay (in cycles)
 for a packet that was destined to 
\begin_inset Formula $(i,j)^{th}$
\end_inset

 node.
\end_layout

\begin_layout Standard
For communications using the altered Noxim simulator with wireless nodes-
 
\end_layout

\begin_layout Standard
Keeping all other parameters remaining the same and setting the wireless
 bandwidth to 2flits/cycle (effectively 64Gbps for the current scenario),
 we get the following numbers
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
MaxDelay = 
\begin_inset Formula $\begin{pmatrix}7 & 8 & 7 & 9\\
6 & 7 & 7 & 7\\
6 & 8 & 8 & 7\\
7 & 7 & 7 & 8
\end{pmatrix}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
This divide becomes more apparent when we use a higer PIR on a smaller buffer
 size on wired network (keeping buffer size on the wireless network constant
 (this makes sense as wireless nodes are scarce).
\end_layout

\begin_layout Standard
Altered buffer size = 2
\end_layout

\begin_layout Standard
PIR = .05
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout
\begin_inset ERT
status open

\begin_layout Plain Layout

MaxDelay = $
\backslash
begin{pmatrix} 2805 & 2610 & 2835 & 2854
\backslash

\backslash
  2795 & 2796 & 2877 & 2879
\backslash

\backslash
 2776 & 2806 & 2832 & 2906
\backslash

\backslash
  2858 & 2767 & 2739 & 2881
\end_layout

\begin_layout Plain Layout


\backslash
end{pmatrix}$%
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
On the other hand, the hybrid network shows a graceful degradation with
 the following delay results
\end_layout

\begin_layout Standard
\begin_inset Box Shadowbox
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
use_makebox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout Plain Layout

\family roman
\series medium
\shape up
\size normal
\emph off
\bar no
\strikeout off
\uuline off
\uwave off
\noun off
\color none
MaxDelay = 
\begin_inset Formula $\begin{pmatrix}67 & 51 & 75 & 77\\
59 & 63 & 73 & 77\\
72 & 73 & 71 & 72\\
67 & 61 & 73 & 68
\end{pmatrix}$
\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Even, most of the delays show up since the wired links are still being used
 for subnet communication.
\end_layout

\begin_layout Subsection
Future work
\end_layout

\begin_layout Standard
The current work works on a very idealistic model of the wireless channel,
 assuming perfect synchronization without any overhead.
 For the future, I intend to add channel arbitration using one of the MAC
 protocols.
\end_layout

\begin_layout Standard
Also, the current work is limited to study of delays.
 I intend to modify the altered simulator so it also collects the effective
 utilization of the wireless bandwidth so that the maximum bandwidths could
 be compared.
\end_layout

\begin_layout Chapter
Conclusion
\end_layout

\begin_layout Standard
The wireless NoC paradigm has been analyzed in this report.
 Firstly the issues with the currently available wired networks were discussed.
 After that, the different solution paradigms were enumerated and compared,
 leading to the conclusion that WiNoCs hold the most promise for the future.
 Further we discussed the internal characteristics of WiNoCs like antennas,
 the operational frequency, topology , the MAC protocols and the routing
 protocols.
 We ended the section by discussing the external parameter - traffic and
 it's effects on the performance of WiNoC.
 In the last section we analyzed the contribution I am trying to make and
 the expected future work to be done for the successful completion of my
 BTP thesis.
\end_layout

\end_body
\end_document
